server.port=1111
# ===============================
# = DATA SOURCE
# ===============================
# Set here configurations for the database connection
spring.datasource.url=jdbc:postgresql://localhost:5433/proposals_db
spring.datasource.username=postgres
spring.datasource.password=postgres
spring.datasource.driver-class-name=org.postgresql.Driver
# Keep the connection alive if idle for a long time (needed in production)
#spring.datasource.testWhileIdle=true
#spring.datasource.validationQuery=SELECT 1
# ===============================
# = JPA / HIBERNATE
# ===============================
# Show or not log for each sql query
spring.jpa.show-sql=false
# Hibernate ddl auto (create, create-drop, update): with "create-drop" the database
# schema will be automatically created afresh for every start of application
#spring.jpa.hibernate.ddl-auto=update
spring.jpa.hibernate.ddl-auto=create-drop

# Naming strategy
#spring.jpa.hibernate.naming.implicit-strategy=org.hibernate.boot.model.naming.ImplicitNamingStrategyLegacyHbmImpl
#spring.jpa.hibernate.naming.physical-strategy=org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy

# Allows Hibernate to generate SQL optimized for a particular DBMS
#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQL95Dialect

#SEGURANÇCA
#spring.security.user.name=user
#spring.security.user.password=321

spring.security.oauth2.resourceserver.jwt.issuer-uri=${KEYCLOAK_ISSUER_URI:http://localhost:18080/auth/realms/propostas}
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=${KEYCLOAK_JWKS_URI:http://localhost:18080/auth/realms/propostas/protocol/openid-connect/certs}
#
security.oauth2.client.scope=proposta-scope
security.oauth2.client.client-id=proposta-client
security.oauth2.client.client-secret=teste123

#HEALTHCHEK
#management.endpoint.shutdown.enabled=true
#management.endpoint.health.show-details=always
#management.endpoints.web.exposure.include=health,info
#management.endpoints.web.exposure.exclude=
management.endpoints.web.exposure.include=*
management.metrics.export.prometheus.pushgateway.enabled=true
#management.endpoints.web.exposure.include=info,health,prometheus
management.endpoints.prometheus.enabled=true
#management.endpoint.health.status.http-mapping.up=200
#management.endpoint.health.status.http-mapping.down=500
#management.endpoint.health.status.http-mapping.fatal=503
#management.endpoint.health.status.http-mapping.out-of-service=503
#management.endpoints.jmx.exposure.include=health,info,env,beans

#LOGGER
#logging.level.root=DEBUG
#logging.level.root=ERROR
#logging.level.root=FATAL
#logging.level.root=INFO
#logging.level.root=OFF
#logging.level.root=TRACE
#logging.level.root=WARN
#logging.level.com.baeldung=TRACE
logging.level.propostas=INFO
logging.file.name = file.log
logging.file.path=/home/adamcoutinho/workspace-orangestack/orange-talents-01-template-proposta/

#JAEGER
# Jaeger - Habilita ou não
opentracing.jaeger.enabled=${JAEGER_ENABLED:true}

# Jaeger - Nome do serviço
#opentracing.jaeger.service-name=${spring.application.name}
opentracing.jaeger.service-name=propostas-api

# Jaeger - Endereço para enviar os metadados (trace, span, etc)
opentracing.jaeger.http-sender.url=${JAEGER_ENDPOINT:http://localhost:14268/api/traces}

# Jaeger - Tipo de amostragem (probabilístico) e sua configuração (1 = 100%)
opentracing.jaeger.probabilistic-sampler.sampling-rate=${JAEGER_SAMPLER:1}

jasypt=giChHSKO8s1upML6aXxk
